##############################################################################
# maali cygnet file for Opencv
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

OpenCV (Open Source Computer Vision Library) is released under a BSD license
and hence its free for both academic and commercial use. It has C++, C, Python
and Java interfaces and supports Windows, Linux, Mac OS, iOS and Android.
OpenCV was designed for computational efficiency and with a strong focus on
real-time applications. Written in optimized C/C++, the library can take
advantage of multi-core processing. Enabled with OpenCL, it can take advantage
of the hardware acceleration of the underlying heterogeneous compute platform.

For further information see http://opencv.org/

EOF

# specify which PrgEnv we want to build the tool with
if [ ${MAALI_CUDA_BUILD} -eq "1" ]; then
  MAALI_TOOL_COMPILERS="intel/16.0.4"
  MAALI_TOOL_CPU_TARGET="broadwell sandybridge"
  MAALI_TOOL_CUDA_COMPILERS="$MAALI_DEFAULT_CUDA_COMPILERS"
else 
  MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"
  MAALI_TOOL_CPU_TARGET="$MAALI_DEFAULT_TOOL_CPU_TARGET"
fi

# URL to download the source code from
MAALI_URL="http://sourceforge.net/projects/opencvlibrary/files/$MAALI_TOOL_NAME-unix/$MAALI_TOOL_VERSION/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.zip"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.zip"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="apps"

# tool pre-requisites 
MAALI_TOOL_PREREQ="cmake/3.5.2 python/3.6.1 numpy/1.13.1 setuptools ant"

# supports building CUDA version
MAALI_CUDA_SUPPORT=1

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1

##############################################################################

function maali_build {

  MAALI_OLD_PYTHONPATH=$PYTHONPATH
  MAALI_NEWPYTHONPATH="$MAALI_INSTALL_DIR/$MAALI_PYTHON_LIBDIR/python$MAALI_PYTHON_LIB_VERSION/site-packages"
  export PYTHONPATH="$MAALI_NEWPYTHONPATH:$PYTHONPATH"

  maali_makedir "$MAALI_NEWPYTHONPATH"

  cd "$MAALI_TOOL_BUILD_DIR"
  mkdir build
  cd build
  # tmpdir for nvcc 
  mkdir "$MAALI_TOOL_BUILD_DIR"/tmp
  export TMPDIR="$MAALI_TOOL_BUILD_DIR"/tmp
  maali_run 'export TMPDIR=${MAALI_TOOL_BUILD_DIR}/tmp'

  if [ ${MAALI_CUDA_BUILD} -eq "1" ]; then
     maali_run 'cmake -DCMAKE_INSTALL_PREFIX=${MAALI_INSTALL_DIR} -DPYTHON_LIBRARY=${PYTHON_DIR}/lib/libpython3.6m.so -DPYTHON_INCLUDE_DIRS=${PYTHON_DIR}/include/python3.6m -DPYTHON3_EXECUTABLE=${PYTHON_DIR}/bin/python3 -DPYTHON3_PACKAGES_PATH=${MAALI_NEWPYTHONPATH} -DCMAKE_BUILD_TYPE=RELEASE -DWITH_FFMPEG=OFF ../'
  else 
    maali_run 'cmake -DCMAKE_INSTALL_PREFIX=${MAALI_INSTALL_DIR} -DPYTHON_LIBRARY=${PYTHON_DIR}/lib/libpython3.6m.so -DPYTHON_INCLUDE_DIRS=${PYTHON_DIR}/include/python3.6m -DPYTHON3_EXECUTABLE=${PYTHON_DIR}/bin/python3 -DPYTHON3_PACKAGES_PATH=${MAALI_NEWPYTHONPATH} -DCMAKE_BUILD_TYPE=RELEASE -DWITH_FFMPEG=OFF -DWITH_CUDA=OFF -DWITH_CUFFT=OFF ../'
  fi
  make install

  export PYTHONPATH="$MAALI_OLD_PYTHONPATH"
}
