##############################################################################
# maali cygnet file for PgPLot
##############################################################################
read -r -d '' MAALI_MODULE_WHATIS << EOF
Kevin just wanted to echo everything that a Maali run would do, ahead of trying
to build a PgPlot and friends for Miriad, and he eventually created this file,
which was based on a PgPlot 5.3.1 build from VUW, NZ.

For further information talk to Kevin

EOF

# specify which PrgEnv we want to build the tool with
#MAALI_TOOL_CRAY_PRGENV="$MAALI_DEFAULT_CRAY_GCC_PRGENV"
MAALI_TOOL_CRAY_PRGENV="PrgEnv-gnu/6.0.4"

# specify which cpus to target
MAALI_TOOL_CRAY_CPU_TARGET="$MAALI_DEFAULT_CRAY_PES"

# specify which compilers we want to build the tool with
#MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"
MAALI_TOOL_COMPILERS="gcc/7.2.0"

# URL to download the source code from
#MAALI_URL="ftp://ftp.atnf.csiro.au/pub/software/$MAALI_TOOL_NAME/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2"
MAALI_URL="http://www.astro.caltech.edu/~tjp/pgplot/macos/pgplot531.tar.gz"

# location we are downloading the source code to
#MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2"
MAALI_DST="$MAALI_SRC/pgplot531.tar.gz"

# patch files to download
MAALI_TOOL_PATCHES="001 002 003 004 005 006 007 008"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/pgplotsrc"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# tool pre-requisites 
MAALI_TOOL_PREREQ=""

# add additional configure options
MAALI_TOOL_CONFIGURE=""

# for auto-building module files
MAALI_MODULE_SET_PATH=toplevel
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_PGPLOT_DIR='$MAALI_APP_HOME'

# Let's override some of Maali's functions

function maali_pre_build {
  # do any patching before compilation here.

  cd "$MAALI_TOOL_BUILD_DIR"
#
  cp  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.001.patch sys_linux/gfortran_gcc.conf
  sed -e 's/!  PNDRIV/  PNDRIV/g' -e 's/! PSDRIV/  PSDRIV/g' -e 's/! XWDRIV/  XWDRIV/g' -i drivers.list
#
  cp  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.002.patch pgplot.pc
  cp  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.003.patch cpgplot.pc
  sed -e 's/archlibdir/\/usr\/lib64/' -i  pgplot.pc
  sed -e 's/archlibdir/\/usr\/lib64/' -i cpgplot.pc
#
  patch -Np1 -i  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.004.patch
  patch -Np1 -i  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.005.patch
  patch -Np1 -i  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.006.patch
  patch -Np1 -i  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.007.patch
  patch -Np1 -i  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.008.patch
#
  ls -otr
  echo "maali_pre_build:" "$MAALI_TOOL_BUILD_DIR"
}

function maali_build {
  # this is the core function for creating software

  # Note that we build things in the install dir.
  maali_makedir "$MAALI_INSTALL_DIR"
  cd "$MAALI_INSTALL_DIR"
  pwd
#
  cp $MAALI_TOOL_BUILD_DIR/drivers.list .
#
  maali_run "$MAALI_TOOL_BUILD_DIR/makemake $MAALI_TOOL_BUILD_DIR linux gfortran_gcc"
  module list
# Do this by hand for now ??
  module load $MAALI_TOOL_CRAY_PRGENV
  module load $MAALI_TOOL_COMPILERS
  module list
  maali_run "make"
  maali_run "cc -shared -o libcpgplot.so  cpg*.o"
  maali_run "make pgplot.html"
  maali_run "make clean"
  maali_run "rm cpg*.o"
#
  maali_run "mkdir $MAALI_INSTALL_DIR/lib"
  cd $MAALI_INSTALL_DIR/lib
#
  maali_run "ln -s ../libcpgplot.a ."
  maali_run "ln -s ../libcpgplot.so ."
  maali_run "ln -s ../libpgplot.a ."
  maali_run "ln -s ../libpgplot.so.5.3.1 ./libpgplot.so"
  maali_run "ln -s ../libpgplot.so.5.3.1 ./libpgplot.so.5"
#
  echo "maali_build:" "$MAALI_TOOL_BUILD_DIR"
}

##############################################################################
