##############################################################################
# maali cygnet file for PgPLot
##############################################################################
read -r -d '' MAALI_MODULE_WHATIS << EOF
Kevin just wanted to echo everything that a Maali run would do, ahead of trying
to build a PgPlot and friends for Miriad, and he eventually created this file,
which was based on a RPFITS 2.24 build from VUW, NZ.

For further information talk to Kevin

EOF

# specify which PrgEnv we want to build the tool with
#MAALI_TOOL_CRAY_PRGENV="$MAALI_DEFAULT_CRAY_GCC_PRGENV"
MAALI_TOOL_CRAY_PRGENV="PrgEnv-gnu/6.0.4"

# specify which cpus to target
MAALI_TOOL_CRAY_CPU_TARGET="$MAALI_DEFAULT_CRAY_PES"

# specify which compilers we want to build the tool with
#MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"
MAALI_TOOL_COMPILERS="gcc/7.2.0"

# URL to download the source code from
#MAALI_URL="ftp://ftp.atnf.csiro.au/pub/software/$MAALI_TOOL_NAME/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2"
MAALI_URL="ftp://ftp.atnf.csiro.au/pub/software/rpfits/rpfits-2.24.tar.gz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.gz"

# patch files to download
MAALI_TOOL_PATCHES="001 002 003"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/rpfits"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# tool pre-requisites 
MAALI_TOOL_PREREQ=""

# add additional configure options
MAALI_TOOL_CONFIGURE=""

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_RPFITS_DIR='$MAALI_APP_HOME'

# Let's override some of Maali's functions

function maali_pre_build {
  # do any patching before compilation here.

  cd "$MAALI_TOOL_BUILD_DIR"
#
  patch -Np1 -i  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.003.patch
#
  cp $MAALI_FILES_PATH/$MAALI_TOOL_NAME.001.patch ./linux64/Makefile.shared
#
  ls -otr
  echo "maali_pre_build:" "$MAALI_TOOL_BUILD_DIR"
}

function maali_build {
  # this is the core function for creating software
#
  cd $MAALI_TOOL_BUILD_DIR
  cd linux64
#
  module list
# Do this by hand for now ??
  module load $MAALI_TOOL_CRAY_PRGENV
  module load $MAALI_TOOL_COMPILERS
  module list
#
make PREFIX=$MAALI_INSTALL_DIR \
  CFLAGS="${CFLAGS:--O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic}" \
  FFLAGS="${FFLAGS:--O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions -fstack-protector --param=ssp-buffer-size=4 -m64 -mtune=generic -I/usr/lib64/gfortran/modules}" \
 sharedlib
#
# Install
  cd $MAALI_TOOL_BUILD_DIR
  cd linux64
make PREFIX=$MAALI_INSTALL_DIR installsharedlib
mv       $MAALI_INSTALL_DIR/lib $MAALI_INSTALL_DIR/lib64
mkdir -p $MAALI_INSTALL_DIR/doc/rpfits-2,24
cp -p ../doc/newint.txt      $MAALI_INSTALL_DIR/doc/rpfits-2,24/
cp -p ../doc/newwt.txt       $MAALI_INSTALL_DIR/doc/rpfits-2,24/
cp -p ../doc/rpfits.changes  $MAALI_INSTALL_DIR/doc/rpfits-2,24/
cp -p ../doc/rpfits.defn     $MAALI_INSTALL_DIR/doc/rpfits-2,24/
cp -p ../doc/y2k.txt         $MAALI_INSTALL_DIR/doc/rpfits-2,24/
#
  echo "maali_build:" "$MAALI_TOOL_BUILD_DIR"
}

##############################################################################
