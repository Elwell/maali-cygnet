##############################################################################
# maali cygnet file for miriad
##############################################################################
read -r -d '' MAALI_MODULE_WHATIS << EOF
Kevin just wanted to echo everything that a Maali run would do, ahead of trying
to build a PgPlot and friends for Miriad, and he eventually created this file,
which was based on a Miriad 2017.04.27 build from VUW, NZ.

For further information talk to Kevin

EOF

# specify which PrgEnv we want to build the tool with
MAALI_TOOL_CRAY_PRGENV="$MAALI_DEFAULT_CRAY_GCC_PRGENV"

# specify which cpus to target
MAALI_TOOL_CRAY_CPU_TARGET="$MAALI_DEFAULT_CRAY_PES"

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="gcc/7.2.0"

# URL to download the source code from
MAALI_URL="ftp://ftp.atnf.csiro.au/pub/software/miriad/miriad-common.tar.bz2 ftp://ftp.atnf.csiro.au/pub/software/miriad/miriad-code.tar.bz2"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/miriad-common-$MAALI_TOOL_VERSION.tar.bz2 $MAALI_SRC/miriad-code-$MAALI_TOOL_VERSION.tar.bz2"

# patch files to download
MAALI_TOOL_PATCHES="001 002 003"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/Miriad/20180208"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# tool pre-requisites 
MAALI_TOOL_PREREQ="rpfits/2.24 pgplot/5.3.1 wcslib/5.18"

# add additional configure options
MAALI_TOOL_CONFIGURE=""

# for auto-building module files
MAALI_MODULE_SET_PATH="linux64/bin"
MAALI_MODULE_SET_LD_LIBRARY_PATH="linux64/lib"
#
# These match the variables that get set if the user runs a Miriad setup for themselves
#
MAALI_MODULE_SET_MIR='$MAALI_APP_HOME'
MAALI_MODULE_SET_MIRARCH='linux64'

MAALI_MODULE_SET_MIRCAT='$MAALI_APP_HOME/cat'
MAALI_MODULE_SET_MIRDOC='$MAALI_APP_HOME/doc'
MAALI_MODULE_SET_MIRINC='$MAALI_APP_HOME/inc'
MAALI_MODULE_SET_MIRPROG='$MAALI_APP_HOME/prog'
MAALI_MODULE_SET_MIRSUBS='$MAALI_APP_HOME/subs'
MAALI_MODULE_SET_MIRMAN='$MAALI_APP_HOME/man'

MAALI_MODULE_SET_MIRARCHD='$MAALI_APP_HOME/linux64'
MAALI_MODULE_SET_MIRBIN='$MAALI_APP_HOME/linux64/bin'
MAALI_MODULE_SET_MIRLIB='$MAALI_APP_HOME/linux64/lib'
MAALI_MODULE_SET_MIRMAN='$MAALI_APP_HOME/linux64/man'

MAALI_MODULE_SET_PGPLOTFONT='$MAALI_APP_HOME/linux64/lib/grfont.dat'

##############################################################################

function maali_unpack {
  # supress unpacking

  echo "here"

}

##############################################################################

function maali_build {

  maali_makedir "$MAALI_INSTALL_DIR"
  cd "$MAALI_INSTALL_DIR"

  maali_run "tar --strip-components=1 -x -f $MAALI_SRC/miriad-common-$MAALI_TOOL_VERSION.tar.bz2"
  maali_run "tar --strip-components=1 -x -f $MAALI_SRC/miriad-code-$MAALI_TOOL_VERSION.tar.bz2"

  maali_run "patch -Np1 -i  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.001.patch"
  maali_run "patch -Np1 -i  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.002.patch"
  maali_run "patch -Np1 -i  $MAALI_FILES_PATH/$MAALI_TOOL_NAME.003.patch"

  maali_run "./configure --prefix=$MAALI_INSTALL_DIR --with-x  --with-wcslib=$WCSLIB_ROOT/lib  --with-rpfits=$RPFITS_DIR/lib64 --with-pgplot=$PGPLOT_DIR/lib"
  maali_run "make"
}

##############################################################################
