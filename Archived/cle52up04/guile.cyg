##############################################################################
# maali cygnet file for guile
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

Guile is designed to help programmers create flexible applications that can be
extended by users or other programmers with plug-ins, modules, or scripts.

For further information see https://www.gnu.org/software/guile/

EOF

# specify which PrgEnv we want to build the tool with
MAALI_TOOL_CRAY_PRGENV="$MAALI_DEFAULT_CRAY_GCC_PRGENV $MAALI_DEFAULT_CRAY_INTEL_PRGENV"

# specify which cpus to target
MAALI_TOOL_CRAY_CPU_TARGET="$MAALI_DEFAULT_CRAY_PES"

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

# URL to download the source code from
MAALI_URL="ftp://ftp.gnu.org/pub/gnu/$MAALI_TOOL_NAME/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.xz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.xz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# tool pre-requisites
MAALI_TOOL_PREREQ="libunistring/0.9.6"

# tool build pre-requisites - not added to the module, only needed for building (loaded after MAALI_TOOL_PREREQ)
MAALI_TOOL_BUILD_PREREQ=""

# add additional configure options
MAALI_TOOL_CONFIGURE='--with-libunistring-prefix=$MAALI_LIBUNISTRING_HOME'

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_CPATH=1
MAALI_MODULE_SET_PKG_CONFIG_PATH=1

##############################################################################

function maali_build {
  # allows late evaluation
  MAALI_TOOL_CONFIGURE_EVAL=`eval echo "$MAALI_TOOL_CONFIGURE"`

  export LIBS="-L$MAALI_LIBUNISTRING_HOME/lib"

  cd "$MAALI_TOOL_BUILD_DIR"

  if [ "$MAALI_COMPILER_NAME" == "intel" ]; then
    maali_run "./configure --prefix=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE_EVAL"
  elif [ "$MAALI_COMPILER_NAME" == "gcc" ]; then
    maali_run "./configure --disable-error-on-warning --prefix=$MAALI_INSTALL_DIR $MAALI_TOOL_CONFIGURE_EVAL"
  else
    echo "Only gcc and intel are supported"
    exit 1;
  fi

  maali_run "make"
  maali_run "make install"
}

##############################################################################
