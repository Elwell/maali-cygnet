##############################################################################
# maali cygnet file for scalapack
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

ScaLAPACK is a library of high-performance linear algebra routines for parallel
distributed memory machines. ScaLAPACK solves dense and banded linear systems,
least squares problems, eigenvalue problems, and singular value problems.

For further information see http://www.netlib.org/scalapack/

EOF

# specify which PrgEnv we want to build the tool with
MAALI_TOOL_CRAY_PRGENV="$MAALI_DEFAULT_CRAY_INTEL_PRGENV"

# specify which cpus to target
MAALI_TOOL_CRAY_CPU_TARGET="$MAALI_DEFAULT_CRAY_PES"

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

# URL to download the source code from
MAALI_URL="http://www.netlib.org/$MAALI_TOOL_NAME/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tgz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tgz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION"

# tool pre-requisites
MAALI_TOOL_BUILD_PREREQ="$MAALI_DEFAULT_MPI"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

##############################################################################

function maali_build {
  # this is the core function for creating software

  cd "$MAALI_TOOL_BUILD_DIR"
  maali_run "cp SLmake.inc.example SLmake.inc"
  maali_run "sed -i 's/mpif90/ftn/' SLmake.inc"
  maali_run "sed -i 's/mpicc/cc/' SLmake.inc"
  maali_run "sed -i 's/-O3/-O3 -fPIC -dynamic/' SLmake.inc"
  maali_run "sed -i '109s/^  int   n;/  size_t   n;/'  REDIST/SRC/pgemraux.c"
  module unload cray-libsci
  maali_run "make lib"
  maali_run "install -c -m 644 ./libscalapack.a -D $MAALI_INSTALL_DIR/lib/libscalapack.a"
}

##############################################################################
