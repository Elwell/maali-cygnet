##############################################################################
# maali cygnet file for SuiteSparse
##############################################################################

# specify which PrgEnv we want to build the tool with
MAALI_TOOL_CRAY_PRGENV="$MAALI_DEFAULT_CRAY_PRGENVS"

# specify which cpus to target
MAALI_TOOL_CRAY_CPU_TARGET="$MAALI_DEFAULT_CRAY_PES"

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"

# URL to download the source code from
MAALI_URL="http://faculty.cse.tamu.edu/davis/$MAALI_TOOL_NAME_ORIG/$MAALI_TOOL_NAME_ORIG-$MAALI_TOOL_VERSION.tar.gz"

# patch files to download
MAALI_TOOL_PATCHES="001"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME_ORIG-$MAALI_TOOL_VERSION.tar.gz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME_ORIG"

# tool pre-requisites
MAALI_TOOL_PREREQ="cray-tpsl/1.5.0 craype-network-aries"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# for auto-building module files
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_CPATH=1

##############################################################################

# Their own custom configure script.
function maali_build {
  cd $MAALI_TOOL_BUILD_DIR/../

  # SuiteSparse will default to building AND running demos.  This craps out on Magnus because
  # of the Sandybridge/Haswell archictecture differences.  Also, we patch the top-level config 
  # file used for the Makefile (compilers, flags, etc.)
  maali_run "patch -p0 < $MAALI_FILES_PATH/$MAALI_TOOL_NAME.001.patch"
   
  cd $MAALI_TOOL_BUILD_DIR
  
  if [ "$MAALI_COMPILER_NAME" == "cce" ]; then
      export CFLAGS='-O3 -fPIC'
  elif [ "$MAALI_COMPILER_NAME" == "intel" ]; then
      export CFLAGS='-O3 -fPIC -ip -fexceptions -openmp'
  else #GNU
      export CFLAGS='-O3 -fPIC -fexceptions -fopenmp'
  fi
   
  maali_run "make library"
  maali_run "mkdir $MAALI_INSTALL_DIR/include"
  maali_run "mkdir $MAALI_INSTALL_DIR/lib"
  maali_run "make INSTALL_LIB=$MAALI_INSTALL_DIR/lib INSTALL_INCLUDE=$MAALI_INSTALL_DIR/include install"

  cd $MAALI_TOOL_BUILD_DIR/SPQR
  maali_run "make library"
  maali_run "make INSTALL_LIB=$MAALI_INSTALL_DIR/lib INSTALL_INCLUDE=$MAALI_INSTALL_DIR/include install"

  # Build shared libraries
  cd $MAALI_INSTALL_DIR/lib
  maali_run "ld -shared -soname libsuitesparseconfig.so.4 -o libsuitesparseconfig.so.4.4.5 --whole-archive libsuitesparseconfig.a && ln -sf libsuitesparseconfig.so.4.4.5 libsuitesparseconfig.so"
  maali_run "ld -shared -soname libamd.so.2 -o libamd.so.2.4.1 --whole-archive libamd.a && ln -sf libamd.so.2.4.1 libamd.so"
  maali_run "ld -shared -soname libbtf.so.1 -o libbtf.so.1.2.1 --whole-archive libbtf.a && ln -sf libbtf.so.1.2.1 libbtf.so"
  maali_run "ld -shared -soname libcamd.so.2 -o libcamd.so.2.4.1 --whole-archive libcamd.a && ln -sf libcamd.so.2.4.1 libcamd.so"
  maali_run "ld -shared -soname libccolamd.so.2 -o libccolamd.so.2.9.1 --whole-archive libccolamd.a && ln -sf libccolamd.so.2.9.1 libccolamd.so"
  maali_run "ld -shared -soname libcholmod.so.3 -o libcholmod.so.3.0.5 --whole-archive libcholmod.a && ln -sf libcholmod.so.3.0.5 libcholmod.so"
  maali_run "ld -shared -soname libcolamd.so.2 -o libcolamd.so.2.9.1 --whole-archive libcolamd.a && ln -sf libcolamd.so.2.9.1 libcolamd.so"
  maali_run "ld -shared -soname libcxsparse.so.3 -o libcxsparse.so.3.1.4 --whole-archive libcxsparse.a && ln -sf libcxsparse.so.3.1.4 libcxsparse.so"
  maali_run "ld -shared -soname libklu.so.1 -o libklu.so.1.3.2 --whole-archive libklu.a && ln -sf libklu.so.1.3.2 libklu.so"
  maali_run "ld -shared -soname libldl.so.2 -o libldl.so.2.2.1 --whole-archive libldl.a && ln -sf libldl.so.2.2.1 libldl.so"
  maali_run "ld -shared -soname librbio.so.2 -o librbio.so.2.2.1 --whole-archive librbio.a && ln -sf librbio.so.2.2.1 librbio.so"
  maali_run "ld -shared -soname libspqr.so.2 -o libspqr.so.2.0.1 --whole-archive libspqr.a && ln -sf libspqr.so.2.0.1 libspqr.so"
  maali_run "ld -shared -soname libumfpack.so.5 -o libumfpack.so.5.7.1 --whole-archive libumfpack.a && ln -sf libumfpack.so.5.7.1 libumfpack.so"
}

##############################################################################
