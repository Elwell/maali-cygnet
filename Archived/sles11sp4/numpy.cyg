##############################################################################
# maali cygnet file for NumPy
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

NumPy is the fundamental package for scientific computing with Python. It contains among other things:
- a powerful N-dimensional array object
- sophisticated (broadcasting) functions
- tools for integrating C/C++ and Fortran code
- useful linear algebra, Fourier transform, and random number capabilities

For further information see http://www.numpy.org/

EOF

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_PYTHON"

# URL to download the source code from
MAALI_URL="http://pypi.python.org/packages/source/$MAALI_PYTHON_FIRSTLETTER/$MAALI_TOOL_NAME_ORIG/$MAALI_TOOL_NAME_ORIG-$MAALI_TOOL_VERSION.tar.gz"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME_ORIG-$MAALI_TOOL_VERSION.tar.gz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME_ORIG-$MAALI_TOOL_VERSION"

# tool pre-requisites
MAALI_TOOL_PREREQ="intel-mkl/11.2.4"

# for auto-building module files
MAALI_MODULE_SET_PATH=1

##############################################################################

function maali_python_build {

# change to build directory
cd $MAALI_TOOL_BUILD_DIR

# use mkl for performance (Current Intel compilers are different)
cat <<EOF >site.cfg
[mkl]
library_dirs = $MKL_HOME/lib/intel64
include_dirs = $MKL_HOME/include
mkl_libs = mkl_rt
lapack_libs =
EOF

export LDFLAGS='-lgomp'

maali_run "python setup.py config"
maali_run "python setup.py build"
maali_run "python setup.py install --prefix=$MAALI_INSTALL_DIR"
}

##############################################################################
