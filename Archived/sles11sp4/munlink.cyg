##############################################################################
# maali cygnet file for munlink
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

A Lustre-specific command that will simply delete a file without performing a stat() operation

For further information see https://github.com/hpc/lustre

EOF

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_SYSTEM_GCC"

# URL to download the source code from
MAALI_URL="http://git.whamcloud.com/fs/lustre-release.git/blob_plain/ea79df5af4d9b034e39caa396cefc2a075e572ba:/lustre/tests/munlink.c"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/munlink.c"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/munlink"

# make the dir
MAALI_UNPACK_MKDIR=1

# tool pre-requisites
MAALI_TOOL_PREREQ=""

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="tools"

# for auto-building module files
MAALI_MODULE_SET_PATH=1

##############################################################################

function maali_build {
  cd "$MAALI_TOOL_BUILD_DIR"

  maali_makedir "$MAALI_INSTALL_DIR/bin"

  maali_run "gcc -o munlink munlink.c"
  maali_run "install -m 755 $MAALI_TOOL_BUILD_DIR/munlink $MAALI_INSTALL_DIR/bin/"
}

##############################################################################

function maali_unpack {
  cd $MAALI_BUILD_DIR

  for MAALI_INDIVIDUAL_DST in $MAALI_DST; do

    if [ ! -f "$MAALI_INDIVIDUAL_DST" ]; then
      echo "$MAALI_INDIVIDUAL_DST does not exit"
      exit 1
    fi

    MAALI_DST_FILESIZE=$(stat -c%s "$MAALI_INDIVIDUAL_DST")
    if [ $MAALI_DST_FILESIZE -eq 0 ]; then
      echo "$MAALI_INDIVIDUAL_DST is 0 bytes big"
      exit 1
    fi

    if [ $MAALI_UNPACK_MKDIR ]; then
      maali_makedir "$MAALI_TOOL_BUILD_DIR"
      cd "$MAALI_TOOL_BUILD_DIR"
    fi

    MAALI_TYPE=`file -b $MAALI_INDIVIDUAL_DST | cut -d ',' -f 1`

    if [ "$MAALI_TYPE" = "bzip2 compressed data" ]; then
      tar jxf $MAALI_INDIVIDUAL_DST
    elif [ "$MAALI_TYPE" = "compress'd data 16 bits" ]; then
      tar zxf $MAALI_INDIVIDUAL_DST
    elif [ "$MAALI_TYPE" = "xz compressed data" -o "$MAALI_TYPE" = "XZ compressed data" ]; then
      tar Jxf $MAALI_INDIVIDUAL_DST
    elif [ "$MAALI_TYPE" = "gzip compressed data" ]; then
      tar zxf $MAALI_INDIVIDUAL_DST

      if [ $? -ne 0 ]; then
        gzip -dc $MAALI_INDIVIDUAL_DST | tar zxf -
      fi
    elif [[ "$MAALI_TYPE" = "POSIX tar archive (GNU)" ]] || [[ "$MAALI_TYPE" = "POSIX tar archive" ]] ; then
      tar xf $MAALI_INDIVIDUAL_DST
    elif [ "$MAALI_TYPE" = "Zip archive data" ]; then
      if [ "$MAALI_UNZIP_EXCLUDE" == "" ]; then
        unzip -qq $MAALI_INDIVIDUAL_DST
      else
        unzip -qq $MAALI_INDIVIDUAL_DST -x $MAALI_UNZIP_EXCLUDE
      fi
    elif [ "$MAALI_TYPE" = "ASCII C program text" ]; then
      cp "$MAALI_INDIVIDUAL_DST" "$MAALI_TOOL_BUILD_DIR"
    else
      echo "MAALI $MAALI_VERSION does not support decompressing $MAALI_TYPE. Please please lodge a ticket at https://github/Pawseyops/maali."
      exit 1
    fi

    if [ -d "$MAALI_TOOL_BUILD_DIR" ]; then
      if [ "$PAWSEY_PROJECT" != "" ]; then
        # this is only needed for /group
        find $MAALI_TOOL_BUILD_DIR -type d -exec chmod g+s {} \;
      fi
    fi

  done
}

##############################################################################
