##############################################################################
# maali cygnet file for NAMD
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

NAMD, recipient of a 2002 Gordon Bell Award and a 2012 Sidney Fernbach Award,
is a parallel molecular dynamics code designed for high-performance simulation
of large biomolecular systems. Based on Charm++ parallel objects, NAMD scales
to hundreds of cores for typical simulations and beyond 500,000 cores for the
largest simulations. NAMD uses the popular molecular graphics program VMD for
simulation setup and trajectory analysis, but is also file-compatible with
AMBER, CHARMM, and X-PLOR. NAMD is distributed free of charge with source code.

For further information see http://www.ks.uiuc.edu/Research/namd/

EOF

# specify wchich compilers/architecture to use for the GPU build
if [ ${MAALI_CUDA_BUILD} -eq "1" ]; then
  MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_INTEL_COMPILERS"
  MAALI_TOOL_CPU_TARGET="broadwell"
else
  MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_INTEL_COMPILERS"
  MAALI_TOOL_CPU_TARGET="$MAALI_DEFAULT_TOOL_CPU_TARGET"
fi

# specify which cuda versions we want to build the tool with
MAALI_TOOL_CUDA_COMPILERS="$MAALI_DEFAULT_CUDA_COMPILERS"

# URL to download the source code from
MAALI_URL=""

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/NAMD_${MAALI_TOOL_VERSION}_Source.tar.gz"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/NAMD_""$MAALI_TOOL_VERSION""_Source"

MAALI_TOOL_PREREQ="fftw"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="apps"

# for auto-building module files
MAALI_MODULE_SET_PATH=1

# restrict the module to a specified group
MAALI_MODULE_RESTRICT_GROUP='namd'

##############################################################################

function maali_build {

  cd "$MAALI_TOOL_BUILD_DIR"

  CHARM_VERSION=`ls charm*.tar | sed "s/.*-\(.*\)\.[a-zA-Z0-9]\{3\}$/\1/"`

  maali_run 'tar xf charm-$CHARM_VERSION.tar'
  cd "charm-$CHARM_VERSION"

  maali_run './build charm++ verbs-linux-x86_64 icc  smp -j$MAALI_CORES  --with-production'

  echo "Charm built"
 
  cd "$MAALI_TOOL_BUILD_DIR"
 
  if [ $MAALI_CUDA_BUILD -eq 1 ]; then
    maali_run './config Linux-x86_64-icc --charm-arch verbs-linux-x86_64-smp-icc --with-fftw3 --with-tcl --fftw-prefix $FFTW_HOME --with-cuda --cuda-prefix $NVIDIA_CUDA_HOME'
  else
    maali_run './config Linux-x86_64-icc --charm-arch verbs-linux-x86_64-smp-icc --with-fftw3 --with-tcl --fftw-prefix $FFTW_HOME '
  fi

  cd Linux-x86_64-icc
  export TCLLIB=`pkg-config --libs tcl`
  export TCLINCL=''

  #maali_run 'make -e -j $MAALI_CORES'
  maali_run 'make -e -j $MAALI_CORES CXX="$CXX -std=c++11" CC="$CC"'

  cd "$MAALI_TOOL_BUILD_DIR"
  ln -s Linux-x86_64-icc bin
  
  cat <<EOF >srun_launcher
#!/bin/csh -f
shift
exec srun --export=ALL -n $* 
EOF
  chmod +x srun_launcher
  maali_run 'mkdir -p $MAALI_INSTALL_DIR'
  maali_run 'cp -R $MAALI_TOOL_BUILD_DIR/* $MAALI_INSTALL_DIR'
  maali_run 'cp srun_launcher ${MAALI_INSTALL_DIR}/bin'

  ##################################################
  # if this is a system build we need to restrict it to the appropriate group
  if [ "$MAALI_SYSTEM_BUILD" == "YES" ]; then
    maali_run "chmod 750 $MAALI_INSTALL_DIR"
    maali_run "chgrp $MAALI_MODULE_RESTRICT_GROUP $MAALI_INSTALL_DIR"

    maali_run "chmod 750 $MAALI_INSTALL_DIR/bin"
    maali_run "chgrp -R $MAALI_MODULE_RESTRICT_GROUP $MAALI_INSTALL_DIR/bin"
  fi

}

##############################################################################
