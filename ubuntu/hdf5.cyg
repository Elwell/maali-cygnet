##############################################################################
# maali cygnet file for hdf5
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

HDF5 is a data model, library, and file format for storing and managing data.
It supports an unlimited variety of datatypes, and is designed for flexible and
efficient I/O and for high volume and complex data. HDF5 is portable and is
extensible, allowing applications to evolve in their use of HDF5. The HDF5
Technology suite includes tools and applications for managing, manipulating,
viewing, and analyzing data in the HDF5 format.

For further information see https://www.hdfgroup.org/hdf5/

EOF

#since HDF5 can be compiled with a variety of options, define API names

# Set config options based on version
# set the API config options
HDF_V12API=""
HDF_V10API=""
HDF_V6API=""
if [[ $MAALI_TOOL_MINOR_VERSION -eq 12 ]]; then
  HDF_V10API=--with-default-api-version=v110
  HDF_V8API=--with-default-api-version=v16
elif [[ $MAALI_TOOL_MINOR_VERSION -eq 10 ]]; then
  HDF_V6API=--with-default-api-version=v16
fi

#default API name
HDF_API_NAME=""
if [[ $MAALI_TOOL_MINOR_VERSION -eq 12 ]]; then
  HDF_API_NAME="v112"
elif [[ $MAALI_TOOL_MINOR_VERSION -eq 10 ]]; then
  HDF_API_NAME="v110"
elif [[ $MAALI_TOOL_MINOR_VERSION -lt 10 ]]; then
  HDF_API_NAME="v16"
fi
HDF_API_NAME="api-$HDF_API_NAME"

HDF_API_VERSION_CONFIG=""
if [[ $MAALI_TOOL_MINOR_VERSION -eq 12 ]]; then
    if [[ $HDF_USE_API_VERSION -eq 10 ]]; then
        HDF_API_NAME="v110"
        HDF_API_VERSION_CONFIG=$HDF_V10API
    fi
    if [[ $HDF_USE_API_VERSION -eq 6 ]]; then
        HDF_API_NAME="v16"
        HDF_API_VERSION_CONFIG=$HDF_V6API
    fi
fi
if [[ $MAALI_TOOL_MINOR_VERSION -eq 10 ]]; then
    if [[ $HDF_USE_API_VERSION -eq 6 ]]; then
        HDF_API_NAME="v16"
        HDF_API_VERSION_CONFIG=$HDF_V6API
    fi
fi

#default build options and tool pre-requisites
HDF_BUILD_NAME="c++-noparallel"
HDF_BUILD_CONFIG="--enable-fotran --enable-cxx --with-zlib --with-slib=$MAALI_SZIP_HOME"
MAALI_TOOL_PREREQ="zlib/1.2.7 szip/2.1"
if [[ $HDF_WITH_PARALLEL -eq 1 ]]; then
    HDF_BUILD_NAME="parallel"
    HDF_BUILD_CONFIG="--enable-fotran --enable-parallel --with-zlib "
    MAALI_TOOL_PREREQ="openmpi zlib/1.2.7 szip/2.1"
fi

MAALI_TOOL_SUFFIX="$HDF_BUILD_NAME-$HDF_API_NAME"

# specify which compilers we want to build the tool with
MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_COMPILERS"
MAALI_TOOL_CPU_TARGET="$MAALI_DEFAULT_CPU_TARGET"

MAALI_TOOL_CUDA_COMPILERS="$MAALI_DEFAULT_CUDA_COMPILERS"
if [ $MAALI_CUDA_BUILD -eq 1 ] ; then
  MAALI_TOOL_MPI_COMPILERS="$MAALI_DEFAULT_CUDAMPI_COMPILERS"
else
  MAALI_TOOL_MPI_COMPILERS="$MAALI_DEFAULT_MPI_COMPILERS"
fi

# URL to download the source code from
MAALI_URL="http://www.hdfgroup.org/ftp/HDF5/releases/$MAALI_TOOL_NAME-$MAALI_TOOL_MAJOR_MINOR_VERSION/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION/src/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2"

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION.tar.bz2"

# where the unpacked source code is located
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/$MAALI_TOOL_NAME-$MAALI_TOOL_VERSION-$HDF_BUILD_NAME-$HDF"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# add additional configure options
MAALI_TOOL_CONFIGURE='$HDF_BUILD_CONFIG $HDF_API_VERSION_CONFIG --enable-build-mode=production '

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_LD_LIBRARY_PATH=1
MAALI_MODULE_SET_LIBRARY_PATH=1
MAALI_MODULE_SET_MANPATH=1
MAALI_MODULE_SET_CPATH=1
MAALI_MODULE_SET_FPATH=1
MAALI_MODULE_SET_FCPATH=1
MAALI_MODULE_SET_HDF5_DIR='$MAALI_APP_HOME'

##############################################################################

function maali_pre_build {
  cd "$MAALI_TOOL_BUILD_DIR"
  if [ "$MAALI_COMPILER" == "gcc/4.8.3" ]; then
    # Fails on:
    # Testing hard normalized long double -> signed char conversions        Command terminated by signal 11
    # 0.08user 0.01system 0:00.15elapsed 63%CPU (0avgtext+0avgdata 3288maxresident)k
    # 0inputs+216outputs (0major+12213minor)pagefaults 0swaps

    export CFLAGS=-O0
  else
    export CFLAGS=
  fi

  if [ "$MAALI_COMPILER_NAME" == "intel" ]; then
    if [ $MAALI_TOOL_MAJOR_MINOR_VERSION -lt 1.10 ]; then
      echo "H5test_kind_LDFLAGS=-static-libgfortran" >> fortran/src/Makefile.am
    fi
  fi

  echo "AAA = $LD_LIBRARY_PATH"
}

##############################################################################
