##############################################################################
# maali cygnet file for nvidia-peer-memory
##############################################################################

read -r -d '' MAALI_MODULE_WHATIS << EOF

This new technology provides a direct P2P (Peer-to-Peer) data path between the GPU Memory directly to/from the Mellanox HCA devices

EOF

# specify which compilers we want to build the tool with
# MAALI_TOOL_COMPILERS="$MAALI_DEFAULT_SYSTEM_GCC"
MAALI_TOOL_COMPILERS="binary"

# tool pre-requisites modules needed to install this new tool/package
MAALI_TOOL_CUDA_COMPILERS="cuda/10.1"

# URL to download the source code from
MAALI_URL=""

# location we are downloading the source code to
MAALI_DST="$MAALI_SRC/${MAALI_TOOL_NAME}_${MAALI_TOOL_VERSION}.tar.gz"

# where the unpacked source code is located
# Odd doesn't seem to have minor version been stuck like 1.0 for awhile
MAALI_TOOL_BUILD_DIR="$MAALI_BUILD_DIR/${MAALI_TOOL_NAME}-1.0"

# type of tool (eg. apps, devel, python, etc.)
MAALI_TOOL_TYPE="devel"

# for auto-building module files
MAALI_MODULE_SET_PATH=1
MAALI_MODULE_SET_MANPATH=0
MAALI_MODULE_SET_CPATH=1
MAALI_MODULE_SET_FPATH=1
MAALI_MODULE_SET_FCPATH=1

##############################################################################

function maali_build {
  cd "$MAALI_TOOL_BUILD_DIR"
  # Really doesn't really do anything useful, as you need root to insert the nv_peer_mem.ko
  maali_run "make"
  maali_run "mkdir bin"
  maali_run "mkdir include"
  maali_run "cp *.h include"
  maali_run "cp nv_peer_mem bin"
  maali_run "cp create_nv.symvers.sh bin"
  maali_run "cp -R $MAALI_TOOL_BUILD_DIR/* $MAALI_INSTALL_DIR"
}

